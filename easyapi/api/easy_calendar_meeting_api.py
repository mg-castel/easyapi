# coding: utf-8

"""
    Easy Redmine API

    https://app.swaggerhub.com/apis/easysoftware/EasySwagger  # noqa: E501

    OpenAPI spec version: 3.1.11
    Contact: support@easyredmine.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from easyapi.api_client import ApiClient


class EasyCalendarMeetingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def easy_calendar_feed_json_get(self, start, end, **kwargs):  # noqa: E501
        """List of Easy Meetings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.easy_calendar_feed_json_get(start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object start: get meetings only starts in this time (required)
        :param object end: get meetings only ends in this time (required)
        :param object enabled_calendars: list of types - Meetings, Attendance, etc.... by default its `easy_meeting_calendar`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.easy_calendar_feed_json_get_with_http_info(start, end, **kwargs)  # noqa: E501
        else:
            (data) = self.easy_calendar_feed_json_get_with_http_info(start, end, **kwargs)  # noqa: E501
            return data

    def easy_calendar_feed_json_get_with_http_info(self, start, end, **kwargs):  # noqa: E501
        """List of Easy Meetings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.easy_calendar_feed_json_get_with_http_info(start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object start: get meetings only starts in this time (required)
        :param object end: get meetings only ends in this time (required)
        :param object enabled_calendars: list of types - Meetings, Attendance, etc.... by default its `easy_meeting_calendar`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'enabled_calendars']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method easy_calendar_feed_json_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if self.api_client.client_side_validation and ('start' not in params or
                                                       params['start'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start` when calling `easy_calendar_feed_json_get`")  # noqa: E501
        # verify the required parameter 'end' is set
        if self.api_client.client_side_validation and ('end' not in params or
                                                       params['end'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `end` when calling `easy_calendar_feed_json_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'enabled_calendars' in params:
            query_params.append(('enabled_calendars', params['enabled_calendars']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/easy_calendar/feed.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def easy_meetings_format_post(self, format, **kwargs):  # noqa: E501
        """Create EasyMeeting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.easy_meetings_format_post(format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object format: specify format of response (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.easy_meetings_format_post_with_http_info(format, **kwargs)  # noqa: E501
        else:
            (data) = self.easy_meetings_format_post_with_http_info(format, **kwargs)  # noqa: E501
            return data

    def easy_meetings_format_post_with_http_info(self, format, **kwargs):  # noqa: E501
        """Create EasyMeeting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.easy_meetings_format_post_with_http_info(format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object format: specify format of response (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method easy_meetings_format_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if self.api_client.client_side_validation and ('format' not in params or
                                                       params['format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `format` when calling `easy_meetings_format_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/easy_meetings.{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def easy_meetings_id_format_delete(self, format, id, **kwargs):  # noqa: E501
        """Destroy EasyMeeting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.easy_meetings_id_format_delete(format, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object format: specify format of response (required)
        :param object id: ID of EasyMeeting (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.easy_meetings_id_format_delete_with_http_info(format, id, **kwargs)  # noqa: E501
        else:
            (data) = self.easy_meetings_id_format_delete_with_http_info(format, id, **kwargs)  # noqa: E501
            return data

    def easy_meetings_id_format_delete_with_http_info(self, format, id, **kwargs):  # noqa: E501
        """Destroy EasyMeeting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.easy_meetings_id_format_delete_with_http_info(format, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object format: specify format of response (required)
        :param object id: ID of EasyMeeting (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method easy_meetings_id_format_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if self.api_client.client_side_validation and ('format' not in params or
                                                       params['format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `format` when calling `easy_meetings_id_format_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `easy_meetings_id_format_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/easy_meetings/{id}.{format}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def easy_meetings_id_format_get(self, id, format, **kwargs):  # noqa: E501
        """Get EasyMeeting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.easy_meetings_id_format_get(id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: ID of EasyMeeting (required)
        :param object format: specify format of response (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.easy_meetings_id_format_get_with_http_info(id, format, **kwargs)  # noqa: E501
        else:
            (data) = self.easy_meetings_id_format_get_with_http_info(id, format, **kwargs)  # noqa: E501
            return data

    def easy_meetings_id_format_get_with_http_info(self, id, format, **kwargs):  # noqa: E501
        """Get EasyMeeting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.easy_meetings_id_format_get_with_http_info(id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: ID of EasyMeeting (required)
        :param object format: specify format of response (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method easy_meetings_id_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `easy_meetings_id_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if self.api_client.client_side_validation and ('format' not in params or
                                                       params['format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `format` when calling `easy_meetings_id_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/easy_meetings/{id}.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def easy_meetings_id_format_put(self, format, id, **kwargs):  # noqa: E501
        """Update EasyMeeting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.easy_meetings_id_format_put(format, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object format: specify format of response (required)
        :param object id: ID of EasyMeeting (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.easy_meetings_id_format_put_with_http_info(format, id, **kwargs)  # noqa: E501
        else:
            (data) = self.easy_meetings_id_format_put_with_http_info(format, id, **kwargs)  # noqa: E501
            return data

    def easy_meetings_id_format_put_with_http_info(self, format, id, **kwargs):  # noqa: E501
        """Update EasyMeeting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.easy_meetings_id_format_put_with_http_info(format, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object format: specify format of response (required)
        :param object id: ID of EasyMeeting (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method easy_meetings_id_format_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if self.api_client.client_side_validation and ('format' not in params or
                                                       params['format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `format` when calling `easy_meetings_id_format_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `easy_meetings_id_format_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/easy_meetings/{id}.{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
